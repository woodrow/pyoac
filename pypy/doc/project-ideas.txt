Independent project ideas relating to PyPy
==========================================

PyPy allows experimentation in many directions -- indeed facilitating
experimentation in language implementation was one of the main
motivations for the project.  This page is meant to collect some ideas
of experiments that the core developers have not had time to perform
yet and also do not require too much in depth knowledge to get started
with.

Feel free to suggest new ideas and discuss them in #pypy on the freenode IRC
network or the pypy-dev mailing list (see the home_ page).

-----------

.. contents::



JIT back-ends
--------------------------------

PyPy's Just-In-Time compiler relies on backends for actual code
generation.  Right now we are working on the ``pyjitpl5`` branch, which
is not stable.  Working on the JIT backends should be soon possible.
Open ideas are to write a backend for AMD64 (Intel 64); or .NET or
Java (requires porting the JIT frontend to ootype too, which is not too
hard); or trying to use LLVM-JIT.

CTypes
------

Support ctypes on more backends.  Right now ctypes is supported only
when compiling PyPy to C.  A nice project would be to support it when
compiling to .NET or the JVM. That's not too hard, the only thing needed
is to port a small module that does the actual invocation of external
libraries (a related project would be to port this module to Jython or
IronPython to get support for ctypes there).


.. _distribution:
.. _persistence:

Experiment with distribution and persistence
--------------------------------------------

One of the advantages of PyPy's implementation is that the Python-level type
of an object and its implementation are completely independent.  This should
allow a much more intuitive interface to, for example, objects that are backed
by a persistent store.

The `transparent proxy`_ objects are a key step in this
direction; now all that remains is to implement the interesting bits :-)

An example project might be to implement functionality akin to the `ZODB's
Persistent class`_, without the need for the _p_changed hacks, and in pure
Python code (should be relatively easy on top of transparent proxy).

Another example would be to implement a multi-CPU extension that internally
uses several processes and uses transparent proxies to share object views.


Various Ideas
-------------

- improve one of the existing interpreters (e.g. the Prolog, the Scheme or
  the JavaScript interpreter or the Smalltalk VM), or start a new one

- revive the logic object space, which tried to bring unification-like
  features to Python


Or else...
----------

...or whatever else interests you!

Feel free to mention your interest and discuss these ideas on the `pypy-dev
mailing list`_ or on the #pypy channel on irc.freenode.net.
You can also have a look around our documentation_.


.. _`efficient propagators for specialized finite domains`: http://codespeak.net/svn/pypy/extradoc/soc-2006/constraints.txt
.. _`py.test`: http://codespeak.net/py/current/doc/test.html
.. _`py.execnet`: http://codespeak.net/py/current/doc/execnet.html
.. _`Prolog interpreter`: http://codespeak.net/svn/user/cfbolz/hack/prolog/interpreter
.. _`JavaScript interpreter`: ../../pypy/lang/js
.. _`object spaces`: objspace.html
.. _`code templating solution`: http://codespeak.net/svn/pypy/extradoc/soc-2006/code-templating.txt

.. _documentation: docindex.html
.. _home: index.html
.. _`pypy-dev mailing list`: http://codespeak.net/mailman/listinfo/pypy-dev
.. _`ZODB's Persistent class`: http://www.zope.org/Documentation/Books/ZDG/current/Persistence.stx
.. _`transparent proxy`: objspace-proxies.html#tproxy
